generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  password           String
  photo              String?
  isTrainer          Boolean
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  active             Boolean              @default(false)
  ActivateToken      ActivateToken[]
  PasswordResetToken PasswordResetToken[]
  trainer            Trainer?
  user               User?
  messagesFrom Message[] @relation("FromAccount")
  messagesTo   Message[] @relation("ToAccount")

  @@map("accounts")
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  token     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  resetAt   DateTime?
  accountId String
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid())      
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  testimonials Testimonial[]

  @@map("users")
}

model Trainer {
  id             String        @id @default(cuid())
  promoted       Boolean
  accountId      String        @unique
  announcementId String?
  announcement   Announcement?
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("trainers")
}

model Announcement {
  id           String        @id @default(cuid())
  experience   String
  categories   String[]
  price        Float
  description  String
  trainerId    String        @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  isPublished  Boolean?
  photo        String?
  trainer      Trainer       @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  testimonials Testimonial[]

  @@map("announcements")
}

model Testimonial {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  text           String
  title          String
  rating         Int
  announcementId String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, announcementId], name: "userId_announcementId")
  @@map("testimonials")
}

model Message {
  id          String          @id @default(cuid())
  text        String
  from          Account  @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  fromAccountId String   
  to            Account  @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: Cascade)
  toAccountId   String   
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
}
