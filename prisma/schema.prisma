generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  photo         String?
  active        Boolean @default(false)
  isTrainer     Boolean
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  trainer       Trainer?
  user          User?
  ActivateToken ActivateToken[]

  @@map("accounts")
}

model ActivateToken {
  id            String    @id @default(cuid())
  token         String    @unique
  activatedAt   DateTime?

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  account       Account @relation(fields:[accountId], references: [id])
  accountId     String    
}

model User {
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade )

  @@map("users")
}

model Trainer {
  id             String        @id @default(cuid())
  promoted       Boolean
  accountId      String        @unique
  announcementId String?
  announcement   Announcement?
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("trainers")
}

model Announcement {
  id           String        @id @default(cuid())
  experience   String
  categories   String[]
  price        Float
  description  String
  photo        String?
  isPublished  Boolean?
  trainerId    String        @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  trainer      Trainer       @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  testimonials Testimonial[]

  @@map("announcements")
}

model Testimonial {
  id             String       @id @default(cuid())
  name           String
  photo          String
  text           String
  announcementId String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}
